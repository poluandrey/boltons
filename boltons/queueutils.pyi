from typing import Dict, Hashable, Union, Callable, Optional

BList: list = list

class BasePriorityQueue:
    _default_priority_key: Union[float, int, Callable] = ...
    _backend_type: list = ...

    def __init__(self, **kw: Dict) -> None: ...
    def add(self, task: Hashable, priority: Optional[Callable]= ...) -> None: ...
    def remove(self, task: Hashable) -> None: ...
    def peek(self, default=...): ...
    def pop(self, default=...) -> Hashable: ...
    def __len__(self) -> int: ...

class HeapPriorityQueue(BasePriorityQueue): ...
class SortedPriorityQueue(BasePriorityQueue): ...

PriorityQueue = SortedPriorityQueue
